/************ data model **************/
.symbol_type PersonType
.symbol_type DescriptionType

.decl person(name:PersonType, description:DescriptionType)
.input person(filename="DATA/person.facts")

.decl female(name:PersonType)
.input female(filename="DATA/female.facts")

.decl male(name:PersonType)
.input male(filename="DATA/male.facts")

.decl parent_child(p1:PersonType, p2:PersonType)
.input parent_child(filename="DATA/parent_child.facts")

.decl person_living(p:PersonType)
.input person_living(filename="DATA/person_living.facts")

/************* problem 0 **************/
/**** Find all children of Priscilla ****/
.decl p0(x:PersonType, d:DescriptionType)
// NOTE: if you want to redirect the output to a file
// you can use the syntax:
// .output p0(filename="hw2-q3-0.ans")
.output p0(IO=stdout)
p0(x,d) :- parent_child("Priscilla",x), person(x,d).

//problem 1
.decl p1(x:PersonType, d:DescriptionType)
.output p1(filename = "hw4-q3-1")
p1(x,d) :- parent_child("Priscilla",x), person(x,d).
p1(x,d) :- p1(z,_), parent_child(z,x),  person(x,d).


//problem 2
.decl pcf(x:PersonType, y:PersonType)
.decl pcm(x:PersonType, y:PersonType)
.decl pcf1(x:PersonType, n:number)
.decl pcm1(x:PersonType, n:number)
.decl pcf2(n:number)
.decl pcm2(n:number)
.decl p2(x:PersonType, d:DescriptionType, n:number)
.output p2(filename = "hw4-q3-2.ans")
pcm(x,y) :- male(x),  parent_child(x,y).
pcf(x,y) :- female(x), parent_child(x,y).
pcm1(x,n) :- pcm(x,_), n  = count : { pcm(x,_) }.
pcf1(x,n) :- pcf(x,_), n = count : { pcf(x,_) }.
pcm2(n) :- n = max c : {pcm1(_,c)}.
pcf2(n) :- n = max c : {pcf1(_,c)}.
p2(x,d,n) :- pcm1(x,n), pcm2(n), person(x,d).
p2(x,d,n) :- pcf1(x,n), pcf2(n), person(x,d).

<<<<<<< HEAD
=======

>>>>>>> d5c452e0268a0134ebbbba0967cbfc0241b631d6
//problem 3
.decl R1(x:PersonType, n:number)
.decl R2(x:PersonType, n:number)
.decl p3(x:PersonType, m1:number, m2:number)
.output p3(filename = "hw4-q3-3.ans")
R1(x,0) :- parent_child(x,_), !parent_child(_,x).
R1(x,n+1) :- parent_child(y,x), R1(y,n).
R2(x,n) :- R1(x,n), person_living(x).
p3(x,m1,m2) :- R2(x,_), m1 = min c : {R2(x,c)}, m2 = max c : {R2(x,c)}.

//problem 4
.decl p4(x:PersonType)
.output p4(filename = "hw4-q3-4.ans")
.decl R3(x:PersonType, y:PersonType)
.decl R4(x:PersonType, y:PersonType)
.decl R5(x:PersonType, n:number)
R3(x,y) :- female(x), parent_child(x,y).
R3(x,y) :- R3(x,z), R3(z,y).
R4(x,y) :- R3(x,y), person_living(y).
R5(x,n) :- R4(x,_), n = count : {R4(x,_)}.
p4(x) :- R5(x,n), n = 22.

//problem 5
.decl R6(x:PersonType,n:number)
.decl p5(x:PersonType)
.output p5(filename = "hw4-q3-5.ans")
R6(x,n) :- R1(x,n), p4(x).
p5(x) :- R6(x,n), n = max c : {R6(_,c)}.


